@page "/gpt"
@using System.Reflection.Metadata
@using System.Text.Json
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>ChatGPT</PageTitle>

<h1>ChatGPT Request</h1>

<form>
    <label for="description">Description: </label>
    <input id="description" @bind="requestModel.description"/>

    <button class="btn btn-success" @onclick="SendGPTRequestAsync" type="button">Send</button>
</form>

@if (!string.IsNullOrEmpty(responseContent))
{
    <h3>Response:</h3>
    <p>@responseContent</p>
}

@code {
    private RequestModel requestModel = new RequestModel();
    private string responseContent;

    private async Task SendGPTRequestAsync()
    {
        const string url = "https://apim-forstsee-hackathon.azure-api.net/openai-4/gpt4/chat";
        var request = new HttpRequestMessage(HttpMethod.Post, url);

        request.Headers.Add("Ocp-Apim-Subscription-Key", "3e236f929eff430d86451d23c6db7b1f");
        request.Headers.Add("Cache-Control", "no-cache");

        var jsonRequest = new
        {
            messages = new object[]
            {
                new { role = "system", content = 
                    "Deine Aufgabe ist es, Issues zu verwalten. Wenn ein Benutzer ein Problem schildert, musst du Folgendes extrahieren: Erstens, einen aussagekräftigen Titel für das Issue, der klar beschreibt, worum es geht. Zweitens, eine kurze Zusammenfassung der übermittelten Beschreibung. Drittens, passende Labels für das Problem, getrennt durch Kommas. Verfügbare Labels sind: bug, documentation, question, wontfix, invalid, help wanted. Die drei Punkte sollen mit % getrennt werden. Die einzelen Punkte sollen nicht nummeriert werden." },
                new { role = "user", content = requestModel.description }
            }
        };

        request.Content = new StringContent(JsonSerializer.Serialize(jsonRequest), System.Text.Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<ChatResponse>(responseString);
            responseContent = responseObject?.choices?.FirstOrDefault()?.message?.content ?? "No content in response.";
            if (!responseContent.Equals("No content in response."))
            {
                var token = responseContent.Split("%");
                var title = token[0];
                var shortDesc = token[1];
                var lables = token[2];
                await InsertIssueAsync(title, shortDesc, lables);
            } 
        }
        else
        {
            responseContent = "Error sending post request";
            Console.WriteLine("Error sending post request");
        }
    }

    public class RequestModel
    {
        public string description { get; set; }
    }

    public class ChatResponse
    {
        public Choice[] choices { get; set; }
    }

    public class Choice
    {
        public Message message { get; set; }
    }

    public class Message
    {
        public string content { get; set; }
    }
    
    private async Task InsertIssueAsync(String titleU, String bodyU, String lablesU)
    {
        const string repoName = "Kelag-Hackathon-2024-Team-4";
        const string url = $"https://apim-forstsee-hackathon.azure-api.net/github/{repoName}/issues";
        var request = new HttpRequestMessage(HttpMethod.Post, url);

        request.Headers.Add("Ocp-Apim-Subscription-Key", "3e236f929eff430d86451d23c6db7b1f");
        request.Headers.Add("Cache-Control", "no-cache");

        var jsonIssue = new
        {
            title = titleU,
            body = bodyU,
            labels = lablesU.Split(',').Select(label => label.Trim()).ToArray()
        };

        request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(jsonIssue), System.Text.Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);

        Console.WriteLine(response.IsSuccessStatusCode ? "Issue successfully inserted." : "Error inserting issue.");
    }
}
