@page "/gpt"
@using System.Text
@using System.Text.Json
@using Azure.Identity
@using Azure.Security.KeyVault.Secrets
@using Microsoft.Identity.Client.Platforms.Features.DesktopOs.Kerberos
@inject HttpClient Http
@inject ApiDAO ApiDao
@rendermode InteractiveServer

<PageTitle>ChatGPT</PageTitle>

<h1>ChatGPT Request</h1>

<form>
    <label for="description">Description: </label>
    <input id="description" @bind="_requestModel.description"/>

    <button class="btn btn-success" @onclick="SendGptRequestAsync" type="button">Send</button>
</form>

@if (!string.IsNullOrEmpty(_responseContent))
{
    <h3>Response:</h3>
    <p>@_responseContent</p>
}

@code {
    private readonly RequestModel _requestModel = new RequestModel();
    private string _responseContent = null!;
    private const string Prompt = "Deine Aufgabe ist es, Issues zu verwalten. Wenn ein Benutzer ein Problem schildert, musst du Folgendes extrahieren: Erstens, einen aussagekräftigen Titel für das Issue, der klar beschreibt, worum es geht, wobei er nur aus drei bis vier Wörtern bestehen soll. Zweitens, eine kurze Zusammenfassung der übermittelten Beschreibung. Drittens, passende Labels für das Problem, getrennt durch Kommas. Viertens, es soll eine lange und tiefgründige Beschreibung generiert werden, in der das Problem beschrieben wird und steht welche informationen der Benutzer uns gegeben hat und welche nicht. Fünftens, es soll die Priorität bestimmt werden. Zur Auswahl steht: Low, Medium, High, Critical. Verfügbare Labels sind: bug, documentation, question, wontfix, invalid, help wanted. Die drei Punkte sollen mit % getrennt werden. Die einzelnen Punkte sollen nicht nummeriert werden.";

    
    
    private async Task SendGptRequestAsync()
    {
        const string url = "https://apim-forstsee-hackathon.azure-api.net/openai-4/gpt4/chat";
        var request = new HttpRequestMessage(HttpMethod.Post, url);

        string secret = Environment.GetEnvironmentVariable("SUB-KEY");
        request.Headers.Add("Ocp-Apim-Subscription-Key", secret);
        request.Headers.Add("Cache-Control", "no-cache");

        var jsonRequest = new
        {
            messages = new object[]
            {
                new { role = "system", content = Prompt },
                new { role = "user", content = _requestModel.description }
            }
        };

        request.Content = new StringContent(JsonSerializer.Serialize(jsonRequest), Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<ChatResponse>(responseString);
            _responseContent = responseObject?.choices?.FirstOrDefault()?.message?.content ?? "No content in response.";
            if (!_responseContent.Equals("No content in response."))
            {
                var token = _responseContent.Split("%");
                var title = token[0];
                var shortDesc = token[1];
                var labels = token[2];
                var longDesc = token[3];
                var priority = token[4];
                await ApiDao.InsertIssueAsync(title, shortDesc, labels);
                await ApiDao.InsertTicketAsync(title, shortDesc, labels);
            }
        }
        else
        {
            _responseContent = "Error sending post request";
            Console.WriteLine("Error sending post request");
        }
    }

}